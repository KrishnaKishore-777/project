// routes/restaurants.js

const express = require('express');
const router = express.Router();
const Restaurant = require('../models/Restaurant');

// Add a restaurant
router.post('/add', async (req, res) => {
  const { name, cuisine, priceRange, location } = req.body;

  try {
    const restaurant = new Restaurant({
      name,
      cuisine,
      priceRange,
      location
    });

    await restaurant.save();
    res.status(201).send('Restaurant added');
  } catch (error) {
    console.error('Error adding restaurant:', error);
    res.status(500).send('Error adding restaurant');
  }
});

// Add a review to a restaurant
router.post('/:restaurantId/reviews', async (req, res) => {
  const { restaurantId } = req.params;
  const { userId, rating, review } = req.body;

  try {
    const restaurant = await Restaurant.findById(restaurantId);
    const user = await User.findById(userId);

    if (!restaurant || !user) {
      return res.status(404).send('Restaurant or User not found');
    }

    const newReview = {
      user: userId,
      rating,
      review
    };

    restaurant.reviews.push(newReview);
    await restaurant.save();

    res.status(201).send('Review added');
  } catch (error) {
    console.error('Error adding review:', error);
    res.status(500).send('Error adding review');
  }
});

// Search restaurants by various criteria
router.get('/search', async (req, res) => {
  const { name, cuisine, priceRange, location, minRating, maxRating } = req.query;

  try {
    const query = {};

    if (name) query.name = { $regex: name, $options: 'i' };
    if (cuisine) query.cuisine = { $in: cuisine.split(',') };
    if (priceRange) query.priceRange = priceRange;
    if (location) query.location = { $regex: location, $options: 'i' };

    const min = parseFloat(minRating) || 0;
    const max = parseFloat(maxRating) || 5;

    const restaurants = await Restaurant.aggregate([
      { $match: query },
      {
        $project: {
          name: 1,
          cuisine: 1,
          priceRange: 1,
          location: 1,
          averageRating: { $avg: "$reviews.rating" }
        }
      },
      {
        $match: {
          averageRating: { $gte: min, $lte: max }
        }
      }
    ]);

    res.status(200).json(restaurants);
  } catch (error) {
    console.error('Error searching restaurants:', error);
    res.status(500).send('Error searching restaurants');
  }
});

module.exports = router;
